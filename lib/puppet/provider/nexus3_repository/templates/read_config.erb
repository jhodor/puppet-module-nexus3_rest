def repositories = repository.repositoryManager.browse()
def infos = repositories.findResults { repository ->
  def config = repository.getConfiguration()
  def (provider_type, type) = config.recipeName.split('-')

  if (type == 'group') {
    return null
  }

  def storage = config.attributes('storage')
  def proxy = config.attributes('proxy')
  def group = config.attributes('group')
  def maven = config.attributes('maven')
  def yum   = config.attributes('yum')
  def httpclient = config.attributes('httpclient')
  def authentication = httpclient.child('authentication')
  def docker = config.attributes('docker')
  def httpport = docker.get('httpPort') ? docker.get('httpPort').toString() : null
  def httpsport = docker.get('httpsPort') ? docker.get('httpsPort').toString() : null
  def dockerProxy = config.attributes('dockerProxy')
  def yumdepth = yum ? ( yum.get('repodataDepth') ? yum.get('repodataDepth').toString() : null ) : null
  def negativeCache = config.attributes('negativeCache')
  def content_max_age = ( proxy != null ) ? ( proxy.get('contentMaxAge') ? proxy.get('contentMaxAge') : null ) : null
  def metadata_max_age = ( proxy != null ) ? ( proxy.get('metadataMaxAge') ? proxy.get('metadataMaxAge') : null ) : null
  def negative_cache_enabled = negativeCache.get('enabled') ? negativeCache.get('enabled') : null
  def negative_cache_time_to_live = negativeCache.get('timeToLive') ? negativeCache.get('timeToLive') : null
  [
    name: config.repositoryName,
    type: type,
    provider_type: provider_type,
    online: config.isOnline(),
    write_policy: storage.get('writePolicy'),
    blobstore_name: storage.get('blobStoreName'),
    strict_content_type_validation: storage.get('strictContentTypeValidation'),
    remote_url: proxy.get('remoteUrl'),
    version_policy: maven.get('versionPolicy')?.toLowerCase(),
    layout_policy: maven.get('layoutPolicy')?.toLowerCase(),
    remote_auth_type: authentication.get('type') ? authentication.get('type') : 'none',
    remote_user: authentication.get('username'),
    remote_password: authentication.get('password'),
    remote_ntlm_host: authentication.get('ntlmHost'),
    remote_ntlm_domain: authentication.get('ntlmDomain'),
    depth: yumdepth,
    indextype: dockerProxy.get('indexType'),
    httpport: httpport,
    httpsport: httpsport,
    forcebasicauth: docker.get('forceBasicAuth'),
    v1enabled: docker.get('v1Enabled'),
    content_max_age: content_max_age,
    metadata_max_age: metadata_max_age,
    negative_cache_enabled: negative_cache_enabled,
    negative_cache_time_to_live: negative_cache_time_to_live,
  ]
}
return groovy.json.JsonOutput.toJson(infos)
